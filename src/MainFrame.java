
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author tomm
 */
public class MainFrame extends javax.swing.JFrame {

    MongoDB mongo;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        texStatusBar = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        texDoc = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        texCollection = new javax.swing.JTextField();
        bInsertOne = new javax.swing.JButton();
        bShowOne = new javax.swing.JButton();
        bDowload = new javax.swing.JButton();
        bUpload = new javax.swing.JButton();
        bQuery = new javax.swing.JButton();
        cbDatabase = new javax.swing.JComboBox();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MongoDB");

        texStatusBar.setColumns(20);
        texStatusBar.setRows(1);
        jScrollPane2.setViewportView(texStatusBar);

        texDoc.setColumns(20);
        texDoc.setRows(5);
        jScrollPane1.setViewportView(texDoc);

        jLabel1.setText("Database");

        jLabel2.setText("Collection");

        texCollection.setText("people");

        bInsertOne.setText("InsertOne");
        bInsertOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertOneActionPerformed(evt);
            }
        });

        bShowOne.setText("ShowOne");
        bShowOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bShowOneActionPerformed(evt);
            }
        });

        bDowload.setText("Download");
        bDowload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDowloadActionPerformed(evt);
            }
        });

        bUpload.setText("Upload");
        bUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUploadActionPerformed(evt);
            }
        });

        bQuery.setText("Query");
        bQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(texCollection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bInsertOne)
                            .addComponent(bShowOne)
                            .addComponent(bDowload)
                            .addComponent(bUpload)
                            .addComponent(bQuery))
                        .addGap(0, 68, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bInsertOne)
                        .addGap(18, 18, 18)
                        .addComponent(bShowOne)
                        .addGap(18, 18, 18)
                        .addComponent(bDowload)
                        .addGap(18, 18, 18)
                        .addComponent(bUpload)
                        .addGap(18, 18, 18)
                        .addComponent(bQuery)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(texCollection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bInsertOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertOneActionPerformed
        String dbName = (String) cbDatabase.getSelectedItem();
        String colName = texCollection.getText();
        String data = texDoc.getText();
        if (mongo.insertDoc(dbName, colName, data)) {
            texStatusBar.setText("Inserted");
        } else {
            texStatusBar.setText("Failed");
        }
    }//GEN-LAST:event_bInsertOneActionPerformed

    private void bShowOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bShowOneActionPerformed
        String dbName = (String) cbDatabase.getSelectedItem();
        String colName = texCollection.getText();
        String doc = mongo.getOne(dbName, colName);
        texDoc.setText(doc);
        texStatusBar.setText("Retrieved one doc");
    }//GEN-LAST:event_bShowOneActionPerformed

    private void bDowloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDowloadActionPerformed
        String dbName = (String) cbDatabase.getSelectedItem();
        String colName = texCollection.getText();
        String docs = mongo.getAll(dbName, colName);
        String file = writeToFile(docs);
        if (file != null) {
            texStatusBar.setText("Downloaded to file \"" + file + "\"");
        } else {
            texStatusBar.setText("Downloading failed");
        }
    }//GEN-LAST:event_bDowloadActionPerformed

    private void bUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUploadActionPerformed
        String dbName = (String) cbDatabase.getSelectedItem();
        String colName = texCollection.getText();
        String docs=null;
        try {
            docs = readFromFile();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* TEMPORARY */
        if (mongo.insertDoc(dbName, colName, docs)) {
            texStatusBar.setText("Inserted");
        } else {
            texStatusBar.setText("Failed");
        }
//        int i = mongo.insertMultiple(dbName, colName, docs);
//        texStatusBar.setText("Inserted " + i + "docs");
    }//GEN-LAST:event_bUploadActionPerformed

    private void bQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQueryActionPerformed
        String dbName = (String) cbDatabase.getSelectedItem();
        String colName = texCollection.getText();
        String qString = texDoc.getText();
        String doc = mongo.query(dbName, colName, qString);
        texDoc.setText(doc);
        texStatusBar.setText("Retrieved query result");
    }//GEN-LAST:event_bQueryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainFrame m = new MainFrame();
                m.setVisible(true);
                new LoginFrame(m).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDowload;
    private javax.swing.JButton bInsertOne;
    private javax.swing.JButton bQuery;
    private javax.swing.JButton bShowOne;
    private javax.swing.JButton bUpload;
    private javax.swing.JComboBox cbDatabase;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField texCollection;
    private javax.swing.JTextArea texDoc;
    private javax.swing.JTextArea texStatusBar;
    // End of variables declaration//GEN-END:variables

    void getCredentials(MongoDB m) {
        mongo = m;
        Object[] dbs = mongo.getDBs();
        for (Object db : dbs) {
            cbDatabase.addItem(db);
        }
    }

    private String writeToFile(String docs) {
        File file = askForFile();
        try (PrintWriter writer = new PrintWriter(file, "UTF-8")) {
            writer.print(docs);
            writer.close();
            return file.getName();
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private File askForFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        } else {
            return null;
        }
    }

    @SuppressWarnings("ConvertToTryWithResources")
    private String readFromFile() throws IOException {
        File file = askForFile();
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();
                while (line != null) {
                    sb.append(line);
                    sb.append("\n");
                    line = br.readLine();
                }
                return sb.toString();
            } finally {
                br.close();
            }
        } catch (FileNotFoundException e) {
            return null;
        }
    }
}
